---
import Modal from "./Modal.astro";
import { Icon } from "astro-icon/components";

const id = "search_modal";
---

<Modal
  id={id}
  modalClass="items-start"
  boxClass="max-w-none mt-4 w-11/12 md:w-1/2 max-sm:p-4 overflow-hidden border-[1px] border-neutral border-opacity-50 relative top-36 rounded-none"
>
  <!-- Button to open the modal -->
  <span
    slot="modal-btn"
    class="search-container btn btn-sm border-[1px] rounded-xl border-neutral border-opacity-50 font-normal"
  >
    <Icon name="search" size={16} />
    <span class="message hidden sm:inline-block"> Buscar </span>
  </span>
  <!-- Content inside the modal -->
  <div slot="modal-box" class="h-full">
    <h3 class="flex gap-2 md:gap-5 items-center text-lg md:text-2xl mb-4">
      <Icon name="archive" />
      <span>Buscar problema</span>
    </h3>
    <form id="search-form" name="search" method="post">
      <label
        for="search-input"
        class="flex items-center gap-4 w-full max-sm:input-sm input input-info"
      >
        <Icon name="search" size={16} />
        <input
          type="search"
          name="search-input"
          id="search-input"
          class="search-input w-full"
          placeholder="Buscar..."
          autofocus
          autocomplete="off"
        />
        <input type="reset" value="x" class="btn btn-circle btn-xs" />
      </label>
    </form>
    <div
      id="results-container"
      class="container mt-8 flex flex-col gap-2 h-[85%] overflow-y-auto"
    >
      <div
        class="flex items-center justify-center p-4 border-[1px] border-neutral border-opacity-50 rounded-lg select-none"
      >
        <span class="text-lg">
          Busque un problema por su <b>id</b>, <b>nombre</b> o <b>etiqueta</b>
        </span>
      </div>
    </div>
  </div>
</Modal>

<style>
  input[type="search"]::-webkit-search-cancel-button {
    -webkit-appearance: none;
    appearance: none;
  }

  input[type="search"]::-ms-clear {
    display: none;
    width: 0;
    height: 0;
  }
</style>

<script>
  import scriptsJSON from "@/data/scripts.json";
  import type { ScriptData } from "@/data/types";
  import FlexSearch from "flexsearch";

  const index = new FlexSearch.Document({
    tokenize: "forward",
    preset: "performance",
    cache: true,
    document: {
      id: "id",
      index: ["id", "name", "tags"],
      store: true,
    },
  });

  scriptsJSON.forEach((script) => {
    index.add(script);
  });

  function search(query: string) {
    const results = index.search(query, {
      limit: 4,
      enrich: true,
      bool: "or",
    });
    const onlyObjects = results.map((result) =>
      // @ts-ignore
      result.result.map((r) => r.doc)
    );
    return onlyObjects
      .flat()
      .filter((value, index, self) => self.indexOf(value) === index);
  }

  function renderResults(container: HTMLElement, results: ScriptData[]) {
    const BASE_SITE = "Problemas-del-Juez-Patito";
    container.innerHTML = "";

    if (results.length === 0) {
      const div = document.createElement("div");
      div.innerHTML = `
        <div class="flex items-center justify-center p-4 border-[1px] border-neutral border-opacity-50 rounded-lg select-none">
          <span class="text-lg">No se encontraron resultados</span>
        </div>
      `;
      container.appendChild(div);
      return;
    }

    results.forEach((result) => {
      const div = document.createElement("div");
      div.innerHTML = `
        <a href="/${BASE_SITE}/${result.id}" class="flex flex-col gap-2 p-2 border-[1px] border-neutral border-opacity-50 rounded-lg select-none">
          <span class="flex gap-2 items-center">
            <span class="text-xs">${result.id}</span>
            <span class="text-lg overflow-hidden whitespace-nowrap text-ellipsis">${result.name}</span>
          </span>
          <span class="hidden md:flex gap-2 flex-wrap">
            ${result.tags.map((tag) => `<span class="tag badge">${tag}</span>`).join("")}
          </span>
        </a>
      `;
      container.appendChild(div);
    });
  }

  const form = document.getElementById("search-form") as HTMLFormElement;
  const input = document.getElementById("search-input") as HTMLInputElement;
  const resultsContainer = document.getElementById(
    "results-container"
  ) as HTMLElement;

  form.addEventListener("submit", (e) => {
    e.preventDefault();
  });

  let debounceTimeout;
  input.addEventListener("input", () => {
    const { value } = input;
    clearTimeout(debounceTimeout);
    debounceTimeout = setTimeout(() => {
      const results = search(value);
      renderResults(resultsContainer, results);
    }, 500);
  });
</script>
